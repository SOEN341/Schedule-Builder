<?php
require_once('Time.php');
class Schedule {
	public $courses=Array(); //courses that were added successfully
	public $priority =Array(); ///array of hardcoded  priority courses
	public $times=Array();
	public $semester=''; //semester
	public $courseload='';
	public $coursesNeeded=Array(); //list of  courses that the user has
	public $coursesTaken=Array(); //list of courses that the user has taken
	public $prefTime='';
	public $dayOff='';
	public $schedule= Array();

	

	function __construct($coursesNeeded,$coursesTaken,$courseload,$prefTime,$dayOff,$priority){
		$this->coursesTaken=$coursesTaken;
		$this->coursesNeeded=$coursesNeeded;
		$this->courseload=$courseload;
		$this->prefTime=$prefTime;
		$this->dayOff=$dayOff;
		$this->priority=$priority;


		function myfunction($a,$b)
		{
		if ($a===$b)
	   {
	   return 0;
	   }
	   return ($a>$b)?1:-1;
		}

		//$this->courses=array_udiff($priority,$coursesTaken,"myfunction"); //remove the courses that were taken by the user from the priority. 
		$this->courses=array_intersect(array_udiff($priority,$coursesTaken,"myfunction"), $coursesNeeded);

	}

// tries to add a course to the sechdule, returns true if added properly or false if one of the section cannot possibly be added
	function  addCourse($Course){
	
	$Lecture = $Course->lectures;
	$Tutorial = $Course->tutorials;
	$Lab = $Course->labs;
	
	$test = json_decode($Lecture, true);
	
	var_dump($Lecture);
	
	$time = new Time();
	
	// add a lecture,   $course->lectures
	//create an object time for all the lecture sections in the array, using a loop
	//compare with all the times object in the current schedule. using a loop
	//if there are no conflicts add new time to the  $times arrays and add the course to the $schedule array
	//potential for preferences


	// add a tutorial
	//create an object time for all the tutorials sections in the array, using a loop
	//repeat above procedures


	// add a lab if needed



	}



}

