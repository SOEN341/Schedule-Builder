<?php
 require_once('Time.php');
	require_once('Course.php');
class Schedule
    {

   
    public $courses = Array(); //courses that were added successfully
    public $priority = Array(); ///array of hardcoded  priority courses
    public $arrayOfTimes;
    public $semester = ''; //semester
    public $courseload = '';
    public $coursesNeeded = Array(); //list of  courses that the user has
    public $coursesTaken = Array(); //list of courses that the user has taken
    public $prefTime = '';
    public $dayOff = '';
    public $schedule = Array();
    
    
    
    function __construct($coursesNeeded, $coursesTaken, $courseload, $prefTime, $dayOff, $priority)
        {
        $this->coursesTaken  = $coursesTaken;
        $this->coursesNeeded = $coursesNeeded;
        $this->courseload    = $courseload;
        $this->prefTime      = $prefTime;
        $this->dayOff        = $dayOff;
        $this->priority      = $priority;
        $this->arrayOfTimes= Array();
        
        
        function myfunction($a, $b)
            {
            if ($a === $b)
                {
                return 0;
                }
            return ($a > $b) ? 1 : -1;
            }
        
        //$this->courses=array_udiff($priority,$coursesTaken,"myfunction"); //remove the courses that were taken by the user from the priority. 
        $this->courses = array_intersect(array_udiff($priority, $coursesTaken, "myfunction"), $coursesNeeded);
        
        }
    
    // tries to add a course to the sechdule, returns true if added properly or false if one of the section cannot possibly be added
    function addCourse($Course)
        {
        
        $Lecture  = $Course->lectures;
        $Tutorial = $Course->tutorials;
        $Lab      = $Course->labs;
        $test     = array();
        $time     = array();
        $addTo    = array();
        $conflict  = true;
    $conflicttuto=true;

    $timetuto=Array();
         
//all lecture jason strings
        foreach ($Lecture as $key => $value)
            {
                //var_dump($value);
                //echo strlen($value);
               // if (strlen($value) ==212) //sectionts that matched the right format
            array_push($test,json_decode($value, true));
            }
//test -> array of courses in json/arrayformat
                   
        foreach ($test as $key => $value)
            {
          // var_dump($value);    
           $temp = new Time($value['dayOffered'], $value['beginTime'], $value['endTime'],$value[‘courseCode’]);
           array_push($time, $temp);
            }
           // var_dump($time);
           // var_dump($this->arrayOfTimes);
        //time contains an array of object times, -->lectures
        foreach ($time as $key => $value)
            {
            foreach ($this->arrayOfTimes as $key => $setTimes)
                {
                    //var_dump($setTimes);
                if ($value->CompareTo($setTimes['0']->Day, $setTimes['0']->StartTime, $setTimes['0']->EndTime) == false)
                    {
                        $conflict = true;                    
                    }
                }
            
            if ($conflict)
                {
conflict=false;
                Continue; //switches to the next section in the time array.
                }
//assuming here that the lecture fit.
//trying for tutorial

    $tutos=Array();
    foreach ($Tutorial as $key => $value)
            {
                //var_dump($value);
                //echo strlen($value);
                       array_push($tutos,json_decode($value, true));
            }
//tutos -> array of tutorials in json/arrayformat
//we want the tutorials starting with the section name
                   
        foreach ($tutos as $key => $value)
            {
          // var_dump($value);    
           $temp = new Time($value['dayOffered'], $value['beginTime'], $value['endTime'],$value[‘courseCode’]);
           array_push($timetuto, $temp);
            }
    //testing against the times in the schedule ------------------------

$tutolenght=count($timetuto);
$counter=0;
foreach ($timetuto as $key => $value)          {
            foreach ($this->arrayOfTimes as $key => $setTimes)              {
                    //var_dump($setTimes);
                if ($value->CompareTo($setTimes['0']->Day, $setTimes['0']->StartTime, $setTimes['0']->EndTime) == false)
                    {
               $conflicttuto = true;                    
                    }
                            
            if ($conflicttuto)
                {
conflicttuto=false;
                Continue; //switches to the next section in the time array.
                }
counter++;
} //end of the time schedule loop

} //end of the tuto loop 

    if($counter==tutolenght){
continue;
}

              } //end section loop
        
  


                      
    }
?>